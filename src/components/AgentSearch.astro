---
interface Agent {
  name: string;
}

const { agents = [] } = Astro.props as { agents?: Agent[] };
---

<input
  type="text"
  id="agent-search"
  placeholder="Buscar agente..."
  class="w-full px-4 py-2 border border-gray-300 rounded-md mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
/>

<div id="agent-results" class="grid grid-cols-4 md:grid-cols-9 gap-4">
  {
    agents.map((agent: any) => (
      <a
        href={`/agent/${agent.slug}`}
        class="agent-card rounded-lg border border-gray-200 mx-auto bg-red-300 hover:bg-red-600 transition-colors cursor-pointer hover:translate-y-[-5px]"
        id={agent.slug}
        data-name={agent.name.toLowerCase()}
      >
        <img
          src={agent.image}
          alt={agent.name}
          class="w-full h-full object-cover"
        />
      </a>
    ))
  }
</div>

<script>
  const searchInput = document.getElementById(
    "agent-search"
  ) as HTMLInputElement;
  const agentCards = document.querySelectorAll(
    ".agent-card"
  ) as NodeListOf<HTMLElement>;

  if (searchInput) {
    searchInput.addEventListener("input", () => {
      const searchTerm = searchInput.value.toLowerCase();

      agentCards.forEach((card) => {
        const name = card.dataset.name?.toLowerCase() || "";
        card.style.display = name.includes(searchTerm) ? "block" : "none";
      });
    });
  }
</script>
